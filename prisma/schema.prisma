// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "mysql"
    relationMode = "prisma"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String  @unique
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    refresh_token_expires_in Int? 
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?  @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    automations   Automation[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Automation {
  id         String   @id @default(cuid())
  webhookID  String
  condition  String
  name       String
  owner      String
  repository String
  desc       String
  status     String

  action     Action   @relation(fields: [actionID], references: [id], onDelete: Cascade)
  actionID   String

  createdBy   User     @relation(fields: [createdByID], references: [id])
  createdByID String

  @@index([actionID])
  @@index([createdByID])
}

model Action {
  id            String   @id @default(cuid())
  hookID        String   @unique
  actionType    String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // if actionType is email
  toEmail       String?
  subject       String?
  scheduleSend  Int?

  // more actionType here and below

  automations   Automation[]
}